# Generates a test data file
# named 'MockData.swift' for
# the iOS application 'Smile Report'
import logging
import os
import datetime
import time
import random

# Add a 0 to the front of single digit day numbers
def formatDayNumber(dayNumber):
    if (dayNumber < 10):
        newDayNumber = "0" + str(dayNumber)
        return newDayNumber
    else:
        return str(dayNumber)

# Set logging level
logging.getLogger().setLevel(logging.INFO)

# Parameters for data generation
smiles = ["smile_neutral", "smile_happy", "smile_sad", "smile_angry", "smile_love", "smile_excitement", "smile_surpise"]
months = ["JAN", "FEB", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUG", "SEP", "OCT", "NOV", "DEC"]
monthDayCount = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
###############################################################
# CHANGE MONTH BOOLEANS TO TRUE TO GENERATE DATA FOR THAT MONTH
###############################################################
dataMonthsToGenerate = [True, True, True, True, True, True, True, True, True, True, True, True]
dataYear = "2018"
dataEntryTime = "20:00"

# Returns a random smile value
def createSmileValue():
    return smiles[random.randint(0,6)]

# Create timestamp and file header for generated data
ts = time.time()
currentYear = str(datetime.datetime.now().year)
timestamp = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
fileHeader = "//\n" + "// MockData.swift\n" + "// Smile Report\n" + "//\n" + "// Created by Dylan Rothfeld on " + timestamp + ".\n" + "// Generated by GenerateMockData.py\n" + "// Copyright " + currentYear + " Dylan Rothfeld. All rights reserved.\n" + "//\n \n"

# Intro logging message
print('-------------------------------------------------------')
logging.info('Executing GenerateMockData.py')
logging.info('Generating MockData.swift')

# Building file string to write to file
fileString = fileHeader
postFileString = "let mockData: [DayEntry] = ["
for index, isMonthActive in enumerate(dataMonthsToGenerate):

    # Month is active, generate data
    if (isMonthActive):
        logging.info('Creating data for ' + months[index] + ' ' + str(dataYear))

        # Generate data to append to file fileString
        # for each day in the active month
        for i in range(monthDayCount[index]):
            # Append DayEntry line to fileString
            fileString += """let"""+""" """+months[index]+"""_"""+formatDayNumber(i+1)+"""_"""+dataYear+': DayEntry = DayEntry(timestamp: "'+dataYear+"""-"""+formatDayNumber(index+1)+"""-"""+formatDayNumber(i+1)+""" """+dataEntryTime+'", smileEntry: '+createSmileValue()+')\n'
            postFileString += months[index]+"""_"""+formatDayNumber(i+1)+"""_"""+dataYear+""", """

# Writing to file
fileString += "\n" + postFileString[:-2] + "]"
file = open("MockData.swift", "w")
file.write(fileString)
file.close()

# Exit logging message
logging.info('Finished executing GenerateMockData.py')
print('-------------------------------------------------------')
